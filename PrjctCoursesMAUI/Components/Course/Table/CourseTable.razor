@page "/cardtable"

@using System.Net.Http.Json

@inject ICourseService _courseService;
@inject IDialogService DialogService
@inject AppState AppState

@implements IDisposable



@*     Height = "430px" *@
<MudDataGrid Elevation="4" RowsPerPage="20" T="CourseModel" MultiSelection="true" Items="@AppState.CourseList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <TableButtons />
    </ToolBarContent>
    <Columns>
        @*  <SelectColumn T="CourseModel" /> *@
        <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />
        <TemplateColumn CellClass="d-flex justify-center" Title="Status" Filterable="false">
            <CellTemplate>
                @if (CourseStatus.Obsolete == @context.Item.Status)
                {
                    <MudChip Color="Color.Dark">@context.Item.Status</MudChip>
                }
                @if (CourseStatus.Finished == @context.Item.Status)
                {
                    <MudChip Color="Color.Success">@context.Item.Status</MudChip>
                }
                @if (CourseStatus.Starting == @context.Item.Status)
                {
                    <MudChip Color="Color.Primary">@context.Item.Status</MudChip>
                }
                @if (CourseStatus.NotStartingYet == @context.Item.Status || "Not Started Yet" == @context.Item.Status)
                {
                    <MudChip Color="Color.Surface">@context.Item.Status</MudChip>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Author" Title="Author" Filterable="false" />
        <PropertyColumn Property="x => x.Company" Title="Company" Filterable="false" />
        <PropertyColumn Property="x => x.Category" Title="Category" Filterable="false" />
        <PropertyColumn Property="x => x.Technology" Title="Technology" Filterable="false" />
        <TemplateColumn CellClass="d-flex justify-end" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudFab Color="Color.Tertiary" Size="Size.Small" @onclick="() => EditItem(context.Item)" StartIcon="@Icons.Material.Filled.Edit" />

                    @if (!String.IsNullOrWhiteSpace(@context.Item.Url))
                    {
                        <MudFab Color="Color.Secondary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Link" Href="@context.Item.Url" />
                    }
                    else
                    {
                        <MudFab Color="Color.Dark" Size="Size.Small" StartIcon="@Icons.Material.Filled.Link" Disabled="true" />
                    }

                    @if (!String.IsNullOrWhiteSpace(@context.Item.Github))
                    {
                        <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Custom.Brands.GitHub" Href="@context.Item.Github" />
                    }
                    else
                    {
                        <MudFab Color="Color.Dark" Size="Size.Small" StartIcon="@Icons.Custom.Brands.GitHub" Disabled="true" />
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="CourseModel" />
    </PagerContent>
</MudDataGrid>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@*    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
    </div> *@

@*     <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels> *@
@* }
 *@

@code {

    [Parameter]
    public IEnumerable<CourseModel> Courses { get; set; } = new List<CourseModel>();

    protected override void OnInitialized() => AppState.OnChange += StateHasChanged;

    public void Dispose() => AppState.OnChange -= StateHasChanged;

    private void EditItem(CourseModel? course)
    {
        var dialogParameters = new DialogParameters<CourseModel>();
        dialogParameters.Add("Course", course);

        DialogService.Show<Dialog>("Edit course", dialogParameters, new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "my-custom-class" });
    }

    #region GRID events properties

    bool disabled = true;

    private string? _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<CourseModel, object>
        _sortBy => x =>
        {
            if (_sortNameByLength)
                return x.Name.Length;
            else
                return x.Name;
        };
    // quick filter - filter globally across multiple columns with the same input
    private Func<CourseModel, bool>
        _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;

            if (x.Author.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Technology.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Category.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Company.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            @*  if ($"{x.Category} {x.Status} {x.Technology}".Contains(_searchString))
                return true; *@

            return false;
        };

    // events
    void RowClicked(DataGridRowClickEventArgs<CourseModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<CourseModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CourseModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
    #endregion

}





